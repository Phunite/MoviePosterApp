{"version":3,"sources":["components/Header.js","components/Poster.js","components/PosterContainer.js","components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","menuButton","marginRight","spacing","hide","drawer","width","flexShrink","drawerPaper","drawerHeader","Object","objectSpread","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","transition","transitions","create","easing","sharp","duration","leavingScreen","marginLeft","contentShift","easeOut","enteringScreen","Header","classes","useTheme","_React$useState","React","useState","_React$useState2","slicedToArray","open","setOpen","react_default","a","createElement","className","CssBaseline","AppBar","Toolbar","IconButton","color","aria-label","onClick","edge","clsx","Menu_default","Typography","variant","noWrap","Drawer","title","anchor","paper","direction","ChevronLeft_default","ChevronRight_default","Divider","List","map","text","index","ListItem","button","key","ListItemIcon","AccountBox_default","Favorite_default","ListItemText","primary","defineProperty","Poster","this","props","poster","id","src","poster_path","alt","Component","PosterContainer","posters","components_Poster","SearchBar","state","searchText","onEnterPress","e","_this","getSearchText","setState","onTextChange","target","name","value","TextField_default","onChange","onKeyDown","floatingLabelText","fullWidth","autoComplete","App","items","page","apiUrl","apiKey","query","language","searchMode","fetch","then","res","json","results","_this2","_ref","MuiThemeProvider_default","Page","components_SearchBar","components_PosterContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.02c334dd.chunk.js","sourcesContent":["import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport AccountBox from '@material-ui/icons/AccountBox';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: '0 8px',\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-end',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginLeft: -drawerWidth,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 0,\r\n  },\r\n}));\r\n\r\nexport default function Header() {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  function handleDrawerOpen() {\r\n    setOpen(true);\r\n  }\r\n\r\n  function handleDrawerClose() {\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"Open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, open && classes.hide)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n            Movie Finder Apps\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"persistent\"\r\n        title=\"User\"\r\n        anchor=\"left\"\r\n        open={open}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          {['User', 'Favorite', 'About'].map((text, index) => (\r\n            <ListItem button key={text}>\r\n              <ListItemIcon>{index % 2 === 0 ? <AccountBox /> : <FavoriteIcon />}</ListItemIcon>\r\n                \r\n              <ListItemText primary={text} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n        <Divider />\r\n      </Drawer>\r\n      <main\r\n        className={clsx(classes.content, {\r\n          [classes.contentShift]: open,\r\n        })}\r\n      >\r\n      </main>\r\n    </div>\r\n  );\r\n}","import React, { Component } from 'react';\r\n\r\n\r\nclass Poster extends Component {\r\n\r\n    render() { \r\n        const onClick=()=>console.log(this.props.poster.id)\r\n        return (  \r\n            <div>\r\n              <img key={this.props.poster.id}src={\"https://image.tmdb.org/t/p/w300\"+this.props.poster.poster_path} alt={this.props.poster.title}></img>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n \r\nexport default Poster;","import React, { Component } from 'react';\r\nimport Poster from \"./Poster\";\r\n\r\nclass PosterContainer extends Component {\r\n    render() { \r\n\r\n     //const imageUrl=\"https://image.tmdb.org/t/p/w500\"; \r\n   // const posters=items.map(item=>\"https://image.tmdb.org/t/p/w300\"+item.poster_path);\r\n        return (\r\n        <div className=\"PostContainer\">\r\n            {this.props.posters.map(poster => <Poster key={poster.id} poster={poster}/> )}  \r\n        </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default PosterContainer;\r\n","import React, { Component } from 'react';\r\nimport TextField from 'material-ui/TextField';\r\n\r\nclass SearchBar extends Component {\r\n    state = { \r\n     searchText:\"\",\r\n    };\r\n    \r\n    onEnterPress = (e) => {\r\n        //on Enter Update the query in the state to with the new searchtext\r\n        if (e.key === 'Enter') {\r\n        this.props.getSearchText(this.state.searchText);\r\n        this.setState({searchText:\"\"})\r\n        }\r\n      }\r\n      onTextChange = e => {\r\n        this.setState({[e.target.name]:e.target.value});\r\n        //Uncomment for dynamicc searching\r\n        /* this.props.getSearchText(this.state.searchText); */\r\n\r\n    }\r\n    render() { \r\n        return ( \r\n            <div>\r\n            <TextField name=\"searchText\" \r\n            value={this.state.searchText} \r\n            onChange={this.onTextChange}\r\n            onKeyDown={this.onEnterPress} \r\n            floatingLabelText=\"Search for Movies And Press Enter\" \r\n            fullWidth={true} autoComplete=\"true\"/>\r\n            </div>\r\n);\r\n    }\r\n}\r\n \r\nexport default SearchBar;","import React, { Component } from 'react';\nimport Header from './components/Header'\nimport PosterContainer from \"./components/PosterContainer\"\nimport './app.css';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport SearchBar from './components/SearchBar';\n\n\nclass App extends Component {\n//backdrop_path\n//\nstate = {  \n  items:[],\n  page:1,\n  posters:[],\n  apiUrl:\"https://api.themoviedb.org/3/\",\n  apiKey:\"fabfadfecd6dcd34f26a4142545c1a29\",\n  query:\"https://api.themoviedb.org/3/discover/movie?api_key=fabfadfecd6dcd34f26a4142545c1a29&page=1\",\n  language:\"language=en-US\",\n  searchMode:\"search/movie\",\n  searchText:\"\",\n}\n\n\n // fetch(\"http://api.themoviedb.org/3/discover/movie?api_key=fabfadfecd6dcd34f26a4142545c1a29&page=2\")\n  //https://api.themoviedb.org/3/search/movie?api_key=fabfadfecd6dcd34f26a4142545c1a29&language=en-US&query=spider   \n  //Search\n\ncomponentDidMount(){\n\n  //const discoverMovie=this.state.apiUrl+this.state.searchMode+\"?api_key=\"+this.state.apiKey+\"&\"+this.state.language+\"&page=\"+this.state.page+\"&query=\"+this.state.Term;\n  //console.log(discoverMovie);\n\n  //fetch(discoverMovie)\n  fetch(this.state.query)\n  .then(res=>res.json())\n  .then(json=>{\n    this.setState({\n      items:json.results,\n    })\n  }) \n}\n\ngetSearchText=(text)=>{\nconst query=this.state.apiUrl+this.state.searchMode+\"?api_key=\"+this.state.apiKey+\"&\"+this.state.language+\"&page=\"+this.state.page+\"&query=\"+text;\nfetch(query)\n  .then(res=>res.json())\n  .then(json=>{\n    this.setState({\n      items:json.results,\n    })\n  }) \n}\n  render() {\n\n  //deconstruring the array to get the properties I need.\n \n    const {items}=this.state; \n    let posters=items.map(({id, poster_path,title})=>({id,poster_path,title}));\n    //uncomment for dynamica searching\n     /* if(items!=null){\n       posters=items.map(({id, poster_path,title})=>({id,poster_path,title}));\n     } */\n    return (  \n      <MuiThemeProvider>\n        <div>\n            <Header page={this.state.Page}/> \n            <div className=\"searchBar\"> <SearchBar getSearchText={this.getSearchText}/>\n            </div>\n\n            <PosterContainer posters={posters}/> \n        </div> \n    </MuiThemeProvider>);\n  }\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}